geom_path(data = locs, aes(Longitude, Latitude, color=as.factor(TagID)), size=.05) +
geom_point(data = locs %>% filter(Sequence ==1), aes(Longitude, Latitude), colour = "red", shape = 4) + # capture location
geom_point(data = locs %>% filter(Sequence > 1), aes(Longitude, Latitude, color=as.factor(TagID))) + # capture location
scale_colour_discrete("TagID") +
coord_quickmap(xlim = c(xmin, xmax), ylim = c(ymin, ymax)) +
xlab("Longitude (°)") +
ylab("Latitude (°)") +
theme_bw()
library(googledrive)
install.packages('googledrive')
library(googledrive)
drive_find(n_max = 50)
install.packages('googlesheets4')
devtools::install_github("tidyverse/googlesheets4")
# Load the libraries ------------------------------------------------------
library(tidyverse)
library(lubridate)
library(here)
here::here()
# Read in the data --------------------------------------------------------
# Read the file and create a column of the file's name;
# this provides a column to group points by TagID or code
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(Filename = flnm)
}
# Read each .csv file with tracking data
tbl <-
list.files(path = here('converted_argos'),
pattern='*.csv',
full.names = T) %>%
map_df(~read_plus(.))
tbl
# Use stringr to pull out the tag code from the filename
# Convert date to lubridate (YYYY-MM-DD) format
# Select relevant variables
tbl <- tbl %>%
mutate(TagID = str_sub(Filename, start = -23, end = -18)) %>%
mutate(Date = dmy(Date)) %>%
select(TagID, CRC, Date, Time, Latitude, Longitude, Fix) %>%
arrange(TagID, Date) %>%
distinct()
tbl %>% print(n=Inf)
# Filter out bad points here and duplicates
locs <- tbl %>%
filter(CRC !="Fail") %>%
filter(Fix %in% c("3D", "2D", "A1", "A2", "A3")) %>% # select GPS locations and higher quality Argos location classes
select(-CRC) %>% # this allows you remove duplicates labeled with different CRCs (OK, OK(corrected))
distinct()
locs
# Rename fix type
locs <- locs %>%
mutate(type = case_when(
Fix %in% c("3D", "2D") ~ "GPS",
Fix %in% c('A1', 'A2', 'A3') ~ 'Argos')) %>%
mutate(Fix = paste(Fix, type)) %>%
select(-type)
locs
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(TagID, Date) %>%
mutate(Sequence = sequence(rle(.$TagID)$lengths))
locs
# need to figure out a better way to deal with these bad locations:
locs <- locs %>%
filter(Sequence != 52)
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(TagID, Date) %>%
mutate(Sequence = sequence(rle(.$TagID)$lengths))
locs
# Check - how many locations and tags are there?
table(locs$TagID)
locs %>% print.data.frame()
appended_date <- Sys.Date()
# Write to csv file by date more data was added
write_csv(locs, paste0(here('output_data'), '/', 'amke_locations', '_', appended_date, '.csv'))
# Load the libraries ------------------------------------------------------
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(here)
library(sp)
library(RColorBrewer)
library(htmlwidgets)
#library(colorRamps)
here <- here::here
source('source/make_lines.R') # create lines connecting sequential GPS fixes
# Read in the data --------------------------------------------------------
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
#locs %>% print(n=Inf)
# Map in leaflet by individual ----------------------------------------------------------
TagIDs <- unique(locs$TagID)
# Set colors for birds:
# colorPalette <- colorFactor(palette = rainbow(length(TagIDs)), # could also try primary.colors
#                             domain = locs$TagID)
colorPalette <- colorFactor(rev(RColorBrewer::brewer.pal(9, "Set1")),
domain=locs$TagID)
# colorPalette <- colorFactor(palette = 'Set1', # RColorBrewer
#                             domain = locs$TagID)
# Plot everything (points and tracks) in a leaflet map
map <- leaflet(locs) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB") %>%
addProviderTiles(
"Esri.WorldImagery",
group = "Satellite") %>%
addProviderTiles(
"Stamen.Terrain",
group = "Terrain") %>%
addProviderTiles(
"OpenStreetMap.Mapnik",
group = "OpenStreetMap") %>%
addPolylines(
data = makeLines(locs),
weight = 3,
opacity = 0.4,
color = ~ colorPalette(TagID)) %>%
addCircleMarkers(
~Longitude,
~Latitude,
weight = 1,
color = 'white',
fillColor = ~ colorPalette(TagID),
radius = 5,
fillOpacity = 0.8,
popup=paste(
'<b style="color:#0000FF">', "TagID:", locs$TagID, '</b>', '<br>',
"<b>", "Lat:", "</b>", locs$Latitude, "<br>",
"<b>", "Long:", "</b>", locs$Longitude, "<br>",
"<b>", "Date:", "</b>", locs$Date, "<br>",
"<b>", "Time (GMT):", "</b>", locs$Time, "<br>",
"<b>", "Fix type:", "</b>", locs$Fix, "<br>",
"<b>", "Fix #:", "</b>", locs$Sequence)) %>%
addLayersControl(
position = 'bottomleft',
baseGroups = c("CartoDB", "Satellite", "Terrain", "OpenStreetMap"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend(position = 'bottomleft',
pal = colorPalette,
values = ~TagID,
labels = ~TagID,
title = "TagID")
# obtain the last location for each bird
locs_last <- locs %>%
group_by(TagID) %>%
filter(row_number()==n())
# create map with pulse markers as the most recent location for each bird
pulsemap <- map %>%
addPulseMarkers(
data=locs_last,
~Longitude,
~Latitude,
group = 'Last fix location',
label = ~TagID,
icon = makePulseIcon(
heartbeat=2,
iconSize = 7,
color= ~ colorPalette(TagID))) %>%
addLayersControl(
position = 'bottomleft',
baseGroups = c("CartoDB", "Satellite", "Terrain", "OpenStreetMap"),
overlayGroups = "Last fix location",
options = layersControlOptions(collapsed = FALSE))
pulsemap
saveWidget(pulsemap, file=here("tracking_map.html"))
library(here)
here <- here::here
source('combine_csv_files.R')
source('leaflet_tracking_map.R')
source('email_update.R')
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(here)
library(sp)
library(RColorBrewer)
library(htmlwidgets)
here <- here::here
source('source/make_lines.R') # create lines connecting sequential GPS fixes
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
locs
library(sf)
sf_locs <- sf::st_as_sf(locs, coords = c("Longitude","Latitude")) %>%
sf::st_set_crs(4326)
sf_locs
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
sf_lines
library(mapview)
library(mapview)
sf_lines %>%
mapview::mapview(map.types = "Esri.OceanBasemap",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
?mapview
sf_lines %>%
mapview::mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map1 <- sf_lines %>%
mapview::mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
sf_locs2 <- sf_locs %>%
dplyr::group_by(deployid) %>%
dplyr::summarise()
sf_locs2 <- sf_locs %>%
dplyr::group_by(TagID) %>%
dplyr::summarise()
sf_locs2 %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
sf_points <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
sf_points
sf_points %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map1 %>%
mapview(x = sf_points, map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map1 <- sf_lines %>%
mapview::mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map1 %>%
mapview(x = sf_points, map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map1
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE)
map2
map1 + map2
?mapview
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = 1)
map2
map1 + map2
map2
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, size = 1)
map2
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron",zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = '1')
map2
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron", zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = '0.5')
map2
map2 <- sf_points %>%
mapview(map.types = "CartoDB.Positron", zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = 20)
map2
map1 + map2
map2 <- sf_points %>%
mapview(map.types = c("CartoDB.Positron", "Esri.WorldImagery"), zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = 20)
map2
?map.types
map2 <- sf_points %>%
mapview(map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"), zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = 20)
map2
map1 <- sf_lines %>%
mapview(map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"), zcol = "TagID",                   burst = TRUE, legend = FALSE, homebutton = FALSE)
map1
map2 <- sf_points %>%
mapview(map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"), zcol = "TagID",
burst = TRUE, legend = FALSE, homebutton = FALSE, cex = 20)
map2
map1 + map2
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(here)
library(sp)
library(RColorBrewer)
library(htmlwidgets)
here <- here::here
source('source/make_lines.R') # create lines connecting sequential GPS fixes
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
library(tidyverse)
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
combinedMap <- map1 + map2
saveWidget(combinedMap, file=here("tracking_map.html"))
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map1
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map2
combinedMap <- map1 + map2
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
# convert to sf object
sf_locs <- sf::st_as_sf(locs, coords = c("Longitude","Latitude")) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
sf_lines
# create points
sf_points <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
sf_points
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map1
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map2
combinedMap <- map1 + map2
library(htmlwidgets)
combinedMap <- map1 + map2
saveWidget(combinedMap, file=here("tracking_map.html"))
combinedMap
mapshot(combinedMap, file=here("tracking_map.html"))
install_phantomjs()
webshot::install_phantomjs()
mapshot(combinedMap, file=here("tracking_map.html"))
?mapshot
?mapshot
mapshot(combinedMap, url = here("tracking_map.html"))
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
# convert to sf object
sf_locs <- sf::st_as_sf(locs, coords = c("Longitude","Latitude")) %>%
sf::st_set_crs(4326)
sf_locs
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
sf_lines
# create points
sf_points <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
sf_points
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
library(tidyverse)
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
# convert to sf object
sf_locs <- sf::st_as_sf(locs, coords = c("Longitude","Latitude")) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
# save as html
mapshot(combinedMap, url = here("tracking_map.html"))
library(tidyverse)
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- list.files(here('output_data'))
last_file_loc <- length(output_data_directory)
# read in file
locs <- read_csv(paste0(here('output_data'), '/', output_data_directory[last_file_loc]))
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(TagID = str_sub(TagID, start = 4, end = 6))
# convert to sf object
sf_locs <- sf::st_as_sf(locs, coords = c("Longitude","Latitude")) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(TagID, Date) %>%
dplyr::group_by(TagID) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "TagID", burst = TRUE, legend = FALSE, homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
# save as html
mapshot(combinedMap, url = here("tracking_map.html"))
