sf_locs <- sf::st_as_sf(mapview_locs, coords = c("longitude","latitude")) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "tag_id", burst = TRUE, legend = FALSE, homebutton = FALSE
)
sf_lines
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
map1
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
mapview_locs
mapview_locs %>% print(n=Inf)
library(pacman) # for loading packages
p_load(tidyverse, lubridate, here, fs, vroom, furrr, janitor)
plan(multicore) # for furrr function
# find all the csv files
csv_list <- dir_ls(here::here('converted_argos'),
glob = '*csv')
csv_list <- dir_ls(
here::here('converted_argos'),
glob = '*csv')
csv_list
# read and combine
tbl <- future_map_dfr(csv_list, readr::read_csv, .id = 'path')
# clean names
tbl <- tbl %>% clean_names()
tbl
# Select relevant variables
tbl <- tbl %>%
mutate(tag_id = str_sub(path, start = -23, end = -18)) %>%
mutate(date = dmy(date)) %>%
select(tag_id, crc, date, time, latitude, longitude, fix) %>%
arrange(tag_id, date) %>%
distinct()
tbl %>% print(n=Inf)
# Filter out bad points here and duplicates
locs <- tbl %>%
filter(crc !="Fail") %>%
filter(fix %in% c("3D", "2D", "A1", "A2", "A3")) %>% # select GPS locations and higher quality Argos location classes
select(-crc) %>% # this allows you remove duplicates labeled with different CRCs (OK, OK(corrected))
distinct()
locs
locs %>% print(n=Inf)
# Rename fix type
locs <- locs %>%
mutate(type = case_when(
fix %in% c("3D", "2D") ~ "GPS",
fix %in% c('A1', 'A2', 'A3') ~ 'Argos')) %>%
mutate(fix = str_c(fix, type, sep = ' ')) %>%
select(-type)
locs
locs %>% print(n=Inf)
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(tag_id, date) %>%
mutate(sequence = sequence(rle(.$tag_id)$lengths))
locs
locs %>% print(n=Inf)
# need to figure out a better way to deal with these bad locations:
locs <- locs %>%
filter(sequence != 52)
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(tag_id, date) %>%
mutate(sequence = sequence(rle(.$tag_id)$lengths))
locs
appended_date <- Sys.Date()
locs %>% print(n=Inf)
appended_date <- Sys.Date()
# Write to csv file by date more data was added
vroom_write(locs, str_c(here::here('output_data'), '/', 'amke_locations', '_', appended_date, '.csv'), delim = ",")
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- dir_ls(here::here('output_data'))
last_file_loc <- length(output_data_directory)
output_data_directory[last_file_loc]
# read in file
locs <- read_csv(output_data_directory[last_file_loc])
locs %>% print(n=Inf)
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(tag_id = str_sub(tag_id, start = 4, end = 6))
# remove microwave data
locs <- locs %>%
filter(tag_id != '521' & tag_id != '522')
# convert to sf object
sf_locs <- sf::st_as_sf(
mapview_locs, coords = c("longitude","latitude")
) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
locs %>% print(n=Inf)
mapview_locs <- locs
# convert to sf object
sf_locs <- sf::st_as_sf(
mapview_locs, coords = c("longitude","latitude")
) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "tag_id",
burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
sf_points
# point map
map2 <- sf_points %>%
mutate(tag_id = as.numeric(tag_id)) %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "tag_id",
burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- dir_ls(here::here('output_data'))
last_file_loc <- length(output_data_directory)
output_data_directory[last_file_loc]
# read in file
locs <- read_csv(output_data_directory[last_file_loc])
locs %>% print(n=Inf)
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(tag_id = str_sub(tag_id, start = 4, end = 6))
# remove microwave data
locs <- locs %>%
filter(tag_id != '521' & tag_id != '522')
locs %>% print(n=Inf)
mapview_locs <- locs %>% mutate(tag_id = as.numeric(tag_id))
# convert to sf object
sf_locs <- sf::st_as_sf(
mapview_locs, coords = c("longitude","latitude")
) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "tag_id",
burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- dir_ls(here::here('output_data'))
last_file_loc <- length(output_data_directory)
output_data_directory[last_file_loc]
# read in file
locs <- read_csv(output_data_directory[last_file_loc])
locs %>% print(n=Inf)
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(tag_id = str_sub(tag_id, start = 4, end = 6))
# right now, filter to 2019 birds to clean up map
# locs <- locs %>%
#   filter(longitude > -150 & longitude < -50 & date < '2019-12-15')
# remove microwave data
locs <- locs %>%
filter(tag_id != '521' & tag_id != '522')
locs %>% print(n=Inf)
mapview_locs <- locs %>% mutate(tag_id = as.numeric(tag_id))
# mapview_locs <- locs %>%
#   filter(date > '2019-05-01')
# mapview_locs %>% print(n=Inf)
# convert to sf object
sf_locs <- sf::st_as_sf(
mapview_locs, coords = c("longitude","latitude")
) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
library(pacman) # for loading packages
p_load(tidyverse, lubridate, here, fs, vroom, furrr, janitor)
plan(multicore) # for furrr function
# find all the csv files
csv_list <- dir_ls(
here::here('converted_argos'),
glob = '*csv')
csv_list
# read and combine
tbl <- future_map_dfr(csv_list, readr::read_csv, .id = 'path')
# clean names
tbl <- tbl %>% clean_names()
# Select relevant variables
tbl <- tbl %>%
mutate(tag_id = str_sub(path, start = -23, end = -18)) %>%
mutate(date = dmy(date)) %>%
select(tag_id, crc, date, time, latitude, longitude, fix) %>%
arrange(tag_id, date) %>%
distinct()
tbl %>% print(n=Inf)
# Filter out bad points here and duplicates
locs <- tbl %>%
filter(crc !="Fail") %>%
filter(fix %in% c("3D", "2D", "A1", "A2", "A3")) %>% # select GPS locations and higher quality Argos location classes
select(-crc) %>% # this allows you remove duplicates labeled with different CRCs (OK, OK(corrected))
distinct()
locs %>% print(n=Inf)
# Rename fix type
locs <- locs %>%
mutate(type = case_when(
fix %in% c("3D", "2D") ~ "GPS",
fix %in% c('A1', 'A2', 'A3') ~ 'Argos')) %>%
mutate(fix = str_c(fix, type, sep = ' ')) %>%
select(-type)
locs %>% print(n=Inf)
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(tag_id, date) %>%
mutate(sequence = sequence(rle(.$tag_id)$lengths))
locs %>% print(n=Inf)
# Sort it and create fix # by TagID and date
locs <- locs %>%
arrange(tag_id, date) %>%
mutate(sequence = sequence(rle(.$tag_id)$lengths))
locs %>% print(n=Inf)
appended_date <- Sys.Date()
# Write to csv file by date more data was added
vroom_write(locs, str_c(here::here('output_data'), '/', 'amke_locations', '_', appended_date, '.csv'), delim = ",")
library(sf)
library(mapview)
# find the most recent file, which is last in the list due to sorting
output_data_directory <- dir_ls(here::here('output_data'))
last_file_loc <- length(output_data_directory)
output_data_directory[last_file_loc]
# read in file
locs <- read_csv(output_data_directory[last_file_loc])
locs %>% print(n=Inf)
# change Argos code to 3 digit ID to make leaflet plotting cleaner
locs <- locs %>%
mutate(tag_id = str_sub(tag_id, start = 4, end = 6))
locs
# remove microwave data
locs <- locs %>%
filter(tag_id != '521' & tag_id != '522')
locs %>% print(n=Inf)
mapview_locs <- locs
# convert to sf object
sf_locs <- sf::st_as_sf(
mapview_locs, coords = c("longitude","latitude")
) %>%
sf::st_set_crs(4326)
# create lines
sf_lines <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
str(sf_lines)
# create points
sf_points <- sf_locs %>%
dplyr::arrange(tag_id, date) %>%
dplyr::group_by(tag_id) %>%
#dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTIPOINT")
# line map
map1 <- sf_lines %>%
mapview(
map.types = c(
"CartoDB.Positron",
"Esri.WorldImagery",
"Stamen.Terrain",
"OpenStreetMap.Mapnik"
),
zcol = "tag_id",
burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
zcol = "tag_id",
burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# line map
map1 <- sf_lines %>%
mapview(
map.types = c(
"CartoDB.Positron",
"Esri.WorldImagery",
"Stamen.Terrain",
"OpenStreetMap.Mapnik"
),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# point map
map2 <- sf_points %>%
mapview(
map.types = c("CartoDB.Positron", "Esri.WorldImagery", "Stamen.Terrain", "OpenStreetMap.Mapnik"),
#zcol = "tag_id",
#burst = TRUE,
legend = FALSE,
homebutton = FALSE
)
# combine together
combinedMap <- map1 + map2
combinedMap
library(pacman) # for loading packages
p_load(tidyverse, lubridate, here, fs, vroom, furrr, janitor)
plan(multicore) # for furrr function
# find all the csv files
csv_list <- dir_ls(
here::here('converted_argos'),
glob = '*csv')
csv_list
# read and combine
tbl <- future_map_dfr(csv_list, readr::read_csv, .id = 'path')
# clean names
tbl <- tbl %>% clean_names()
# Select relevant variables
tbl <- tbl %>%
mutate(tag_id = str_sub(path, start = -23, end = -18)) %>%
mutate(date = dmy(date)) %>%
select(tag_id, crc, date, time, latitude, longitude, fix) %>%
arrange(tag_id, date) %>%
distinct()
tbl %>% print(n=Inf)
tbl %>%
write_csv('/Users/Jay/Desktop/all_data.csv')
'%ni%' <- Negate('%in%')
# Load the libraries ------------------------------------------------------
library(pacman) # for loading packages
p_load(tidyverse, lubridate, here, fs, vroom, furrr, janitor)
plan(multicore) # for furrr function
# Read in the data --------------------------------------------------------
# find all the csv files
csv_list <- dir_ls(
here::here('converted_argos'),
glob = '*csv')
csv_list
# read and combine
tbl <- future_map_dfr(csv_list, readr::read_csv, .id = 'path')
# clean names
tbl <- tbl %>% clean_names()
# Select relevant variables
tbl <- tbl %>%
mutate(tag_id = str_sub(path, start = -23, end = -18)) %>%
mutate(date = dmy(date)) %>%
select(tag_id, crc, date, time, latitude, longitude, fix) %>%
arrange(tag_id, date) %>%
distinct()
tbl %>% print(n=Inf)
'%ni%' <- Negate('%in%')
tbl %>%
filter(fix %ni% c("3D", "2D")) %>%
write_csv('/Users/Jay/Desktop/all_data.csv')
